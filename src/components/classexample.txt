import React, { useState } from "react";
import { IonModal, IonButton, IonContent, IonList, IonItem, IonLabel, IonListHeader } from "@ionic/react";
import { Regatta, ButtonState, User } from "../interfaces";
import * as datefns from "date-fns";

import * as firebase from "firebase/app";
import "firebase/firestore";

interface Props {
  regatta: Regatta;
  user: User | null;
  buttonState?: ButtonState;
}
interface State {
  showModal: boolean;
}
export class RegattaListItem extends React.PureComponent<Props, State> {
  // const [showModal, setShowModal] = useState(false);
  // const [counter, setCounter] = useState(0);
  // const modal = React.createRef<HTMLIonModalElement>();

  constructor(props: Props) {
    super(props);
    this.state = {
      showModal: false,
    };
  }

  show = () => this.setState({ showModal: true });
  hide = () => this.setState({ showModal: false });

  handleRegister = async () => {
    if (this.props.user) {
      await firebase
        .firestore()
        .collection("regattas")
        .doc(this.props.regatta.id)
        .update({
          attendees: firebase.firestore.FieldValue.arrayUnion({ name: this.props.user.teamIds[0] }),
        });
    }
  };

  getButton(): JSX.Element {
    const buttonState = this.props.buttonState; // this.state.buttonStateForRegatta.get(regattaId);
    switch (buttonState) {
      case "register":
        return (
          <IonButton onClick={this.handleRegister} disabled={false} color="primary" slot="end">
            Register
          </IonButton>
        );
      case "confirmed":
        return (
          <IonButton disabled={true} color="success" slot="end">
            Confirmed
          </IonButton>
        );
      case "disabled":
        return (
          <IonButton disabled={true} color="medium" slot="end">
            Not Logged In
          </IonButton>
        );
      case "alternate":
        return (
          <IonButton disabled={true} color="warning" slot="end">
            Alternate
          </IonButton>
        );
      case "join_alternates":
        return (
          <IonButton disabled={false} color="tertiary" slot="end">
            Join Alternates
          </IonButton>
        );
    }
    return <div></div>;
  }

  render() {
    return (
      <div key={this.props.regatta.id}>
        <IonItem onClick={this.show}>
          <IonModal isOpen={this.state.showModal}>
            <IonContent>
              <IonList>
                <IonListHeader>
                  <h2>{this.props.regatta.name}</h2>
                </IonListHeader>
                {this.props.regatta.attendees.map((attendee, i) => {
                  return (
                    <IonItem key={i}>
                      <IonLabel style={{ paddingTop: 10 }}>{`${i + 1}. ${attendee.name}`}</IonLabel>
                    </IonItem>
                  );
                })}
              </IonList>
            </IonContent>
            <IonButton onClick={this.hide}>Close</IonButton>
          </IonModal>
          <IonLabel slot="start">{this.props.regatta.name}</IonLabel>
          <IonLabel>
            <h2>{datefns.format(datefns.parseISO(this.props.regatta.date.start), "PP")}</h2>
            <h3>{this.props.regatta.host.name}</h3>
          </IonLabel>
          <IonLabel>{`${this.props.regatta.attendees.length}/${this.props.regatta.capacity}`}</IonLabel>
          {this.getButton()}
        </IonItem>
      </div>
    );
  }
}
